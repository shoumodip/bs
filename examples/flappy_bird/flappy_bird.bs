var rl = import("raylib")
var game = {}

var WIDTH = 800
var HEIGHT = 600

var GRAVITY = 0.5
var IMPULSE = -7

var BIRD_TILT = 20
var BIRD_STARTOFF_SPEED = 7
var BIRD_ANIMATION_SPEED = 0.2

var BIRD_MIN_X = 100
var BIRD_MIN_Y = 50

var PIPE_GAP = 120
var PIPE_SPEED = -4
var PIPE_SPAWN_DELAY = 1.5
var PIPE_SPAWN_RANGE = HEIGHT / 5

var BACKGROUND_SCROLL_SPEED = 0.5

var MESSAGE_PADDING = 30
var OVER_MESSAGE_SCALE = 1.2
var TITLE_MESSAGE_SCALE = 1.2
var CONTINUE_MESSAGE_SCALE = 0.7

var BACKGROUND_MUSIC_DELAY = 1.2

var DEBUG_COLOR = 0xFF0000FF
var DEBUG_HITBOX = false

class Assets {
    init() {
        this.sounds = {}
        this.textures = {}
    }

    sound(path, loader) {
        path = "assets/sounds/" $ path
        if path in this.sounds {
            return this.sounds[path]
        }

        var sound = loader(path)
        if !sound {
            io.eprintln("Error: could not load sound '{path}'")
            os.exit(1)
        }

        this.sounds[path] = sound
        return sound
    }

    texture(path) {
        path = "assets/images/" $ path
        if path in this.textures {
            return this.textures[path]
        }

        var texture = rl.Texture(path)
        if !texture {
            io.eprintln("Error: could not load image '{path}'")
            os.exit(1)
        }

        this.textures[path] = texture
        return texture
    }

    unload() {
        for _, sound in this.sounds {
            sound.unload()
        }

        for _, texture in this.textures {
            texture.unload()
        }
    }
}

class Hitbox {
    init(x, y, width, height) {
        this.x = x
        this.y = y
        this.width = width
        this.height = height
    }

    move(x, y) {
        this.x = x
        this.y = y
    }

    debug() {
        if DEBUG_HITBOX {
            rl.draw_rectangle(this.x, this.y, this.width, this.height, DEBUG_COLOR)
        }
    }

    collides(that) {
        return this.x < that.x + that.width && this.x + this.width > that.x &&
            this.y < that.y + that.height && this.y + this.height > that.y
    }
}

class Bird {
    init() {
        this.dy = 0
        this.current = 0
        this.textures = [
            game.assets.texture("bird0.png"),
            game.assets.texture("bird1.png"),
            game.assets.texture("bird2.png"),
        ]

        var w = this.textures[0].width() * game.scale
        var h = this.textures[0].height() * game.scale
        this.hitbox = Hitbox((WIDTH - w) / 2, HEIGHT / 3, w, h)
    }

    update() {
        if game.started {
            if !game.over && this.hitbox.x > BIRD_MIN_X {
                this.hitbox.x -= BIRD_STARTOFF_SPEED
                this.dy -= 0.3 * GRAVITY
            }

            var needs_dy = !game.over || this.hitbox.y + this.hitbox.height * game.scale < game.base.y
            if needs_dy {
                this.dy += GRAVITY
            }

            if !game.over && rl.is_key_pressed(32) {
                this.dy = IMPULSE
            }

            if needs_dy {
                this.hitbox.y += this.dy
                if this.hitbox.y < BIRD_MIN_Y {
                    this.hitbox.y = BIRD_MIN_Y
                }
            }

            if this.hitbox.y + this.hitbox.height >= game.base.y {
                game.die()
            }
        }

        if !game.over {
            this.current += rl.get_frame_time()
            if this.current >= BIRD_ANIMATION_SPEED * len(this.textures) {
                this.current %= BIRD_ANIMATION_SPEED * len(this.textures)
            }
        }

        this.textures[(this.current / BIRD_ANIMATION_SPEED).floor()].draw(
            this.hitbox.x,
            this.hitbox.y,
            this.dy.sign() * BIRD_TILT,
            game.scale,
            0xFFFFFFFF)

        this.hitbox.debug()
    }
}

class Background {
    init() {
        this.x = 0
        this.texture = game.assets.texture("background.png")
        this.width = this.texture.width()
        game.scale = HEIGHT / this.texture.height()
    }

    update() {
        if !game.over {
            this.x -= BACKGROUND_SCROLL_SPEED
            if this.x < -this.width {
                this.x = 0
            }
        }

        var i = 0
        while this.x + this.width * i < WIDTH {
            this.texture.draw(this.x + this.width * i, 0, 0, game.scale, 0xFFFFFFFF)
            i += 1
        }
    }
}

class Base {
    init() {
        this.x = 0
        this.texture = game.assets.texture("base.png")
        this.width = this.texture.width()
        this.y = HEIGHT - this.texture.height() * game.scale * 0.9
    }

    update() {
        if !game.over {
            this.x += PIPE_SPEED
            if this.x < -this.width {
                this.x = 0
            }
        }

        var i = 0
        while this.x + this.width * i < WIDTH {
            this.texture.draw(
                this.x + this.width * i,
                this.y,
                0,
                game.scale,
                0xFFFFFFFF)

            i += 1
        }
    }
}

class Pipe {
    init(y) {
        this.dx = PIPE_SPEED
        this.texture = game.assets.texture("pipe.png")
        this.hitbox = Hitbox(
            WIDTH,
            y,
            this.texture.width() * game.scale,
            this.texture.height() * game.scale)

        this.scored = false
    }

    top() {
        return Hitbox(
            this.hitbox.x,
            this.hitbox.y - this.hitbox.height / 2,
            this.hitbox.width,
            this.hitbox.height)
    }

    bottom() {
        return Hitbox(
            this.hitbox.x,
            this.hitbox.y + this.hitbox.height / 2 + PIPE_GAP,
            this.hitbox.width,
            this.hitbox.height)
    }

    update() {
        if !game.over {
            this.hitbox.x += this.dx
            if this.hitbox.x + this.hitbox.width < BIRD_MIN_X && !this.scored {
                game.point()
                this.scored = true
            }
        }

        var top = this.top()
        this.texture.draw(top.x, top.y, 180, game.scale, 0xFFFFFFFF)

        var bottom = this.bottom()
        this.texture.draw(bottom.x, bottom.y, 0, game.scale, 0xFFFFFFFF)

        top.debug()
        bottom.debug()
    }
}

class Pipes {
    init() {
        this.items = []
        this.clock = 0
    }

    update() {
        if !game.started {
            return true
        }

        if !game.over {
            this.clock += rl.get_frame_time()
            if this.clock >= PIPE_SPAWN_DELAY {
                this.items.push(Pipe(game.rng.number(-PIPE_SPAWN_RANGE, PIPE_SPAWN_RANGE)))
                this.clock %= PIPE_SPAWN_DELAY
            }

            this.items = this.items.filter(fn (p) -> p.hitbox.x >= -p.hitbox.width)
        }

        for _, pipe in this.items {
            pipe.update()
            if !game.over &&
                (pipe.top().collides(game.bird.hitbox) ||
                 pipe.bottom().collides(game.bird.hitbox)) {
                return false
            }
        }

        return true
    }
}

class Score {
    init() {
        this.best = nil
        this.current = 0
        this.textures = [
            game.assets.texture("0.png"),
            game.assets.texture("1.png"),
            game.assets.texture("2.png"),
            game.assets.texture("3.png"),
            game.assets.texture("4.png"),
            game.assets.texture("5.png"),
            game.assets.texture("6.png"),
            game.assets.texture("7.png"),
            game.assets.texture("8.png"),
            game.assets.texture("9.png"),
        ]
    }

    reset() {
        this.current = 0
    }

    display() {
        if game.started {
            fn show(n, y, scale, tint) {
                var digits = []
                if n < 10 {
                    digits.push(n)
                } else {
                    while n != 0 {
                        digits.push(n % 10)
                        n = (n / 10).floor()
                    }
                }
                digits.reverse()

                scale *= game.scale
                var width = digits.reduce(fn (a, b) -> a + this.textures[b].width() * scale, 0)
                var x = (WIDTH - width) / 2
                for _, n in digits {
                    this.textures[n].draw(x, y, 0, scale, tint)
                    x += this.textures[n].width() * scale
                }
            }

            show(this.current, HEIGHT / 3.6, 1.0, 0xFFFFFFFF)
            if this.best {
                show(this.best, HEIGHT / 2.8, 0.7, 0xDDDDDDFF)
            }
        }
    }
}

rl.init_window(WIDTH, HEIGHT, "Hello from BS!")
rl.init_audio_device()
rl.set_target_fps(60)

game.assets = Assets()
game.started = false
game.over = false
game.rng = math.Random()

game.die = fn () {
    if game.over {
        return
    }

    game.over = true
    if !game.score.best || game.score.current > game.score.best {
        game.score.best = game.score.current
    }

    game.die_sound.play()
    game.background_music_delay = BACKGROUND_MUSIC_DELAY
}

game.point = fn () {
    game.score.current += 1
    game.point_sound.play()
}

game.start = fn () {
    game.start_sound.play()
    game.background_music.toggle()
}

game.background = Background()
game.base = Base()
game.bird = Bird()
game.pipes = Pipes()
game.score = Score()

game.over_message = game.assets.texture("gameover.png")
game.title_message = game.assets.texture("title.png")
game.continue_message = game.assets.texture("continue.png")

game.die_sound = game.assets.sound("die.wav", rl.Sound)
game.point_sound = game.assets.sound("point.wav", rl.Sound)
game.start_sound = game.assets.sound("start.wav", rl.Sound)
game.background_music = game.assets.sound("background.mp3", rl.Music)

game.background_music_delay = 0

while !rl.window_should_close() {
    rl.begin_drawing()
    game.background.update()

    if game.background_music_delay > 0 {
        game.background_music_delay -= rl.get_frame_time()
        if game.background_music_delay <= 0 {
            game.background_music.toggle()
        }
    }

    game.background_music.update()

    if !game.pipes.update() {
        game.die()
    }

    game.base.update()
    game.bird.update()

    if !game.started {
        var x = (WIDTH - game.title_message.width() * TITLE_MESSAGE_SCALE) / 2
        game.title_message.draw(x, HEIGHT / 7, 0, TITLE_MESSAGE_SCALE, 0xFFFFFFFF)

        var x = (WIDTH - game.continue_message.width() * CONTINUE_MESSAGE_SCALE) / 2
        game.continue_message.draw(
            x,
            HEIGHT / 3 + game.continue_message.height() * CONTINUE_MESSAGE_SCALE + MESSAGE_PADDING,
            0,
            CONTINUE_MESSAGE_SCALE,
            0xFFFFFFFF)

        if rl.is_key_pressed(32) {
            game.started = true
            game.bird.dy = IMPULSE
            game.start()
        }
    }

    if game.over {
        var x = (WIDTH - game.over_message.width() * OVER_MESSAGE_SCALE) / 2
        game.over_message.draw(x, HEIGHT / 7, 0, OVER_MESSAGE_SCALE, 0xFFFFFFFF)

        if game.background_music_delay <= 0 {
            var x = (WIDTH - game.continue_message.width() * CONTINUE_MESSAGE_SCALE) / 2
            game.continue_message.draw(
                x,
                HEIGHT / 3 + game.continue_message.height() * CONTINUE_MESSAGE_SCALE + MESSAGE_PADDING,
                0,
                CONTINUE_MESSAGE_SCALE,
                0xFFFFFFFF)

            if rl.is_key_pressed(32) {
                game.over = false
                game.score.reset()

                game.bird = Bird()
                game.pipes = Pipes()

                game.bird.dy = IMPULSE
                game.start()
            }
        }
    }

    game.score.display()
    rl.end_drawing()
}

game.assets.unload()

rl.close_audio_device()
rl.close_window()
