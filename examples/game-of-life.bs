class GameOfLife {
    init(width, height) {
        this.width = width;
        this.height = height;

        this.board = [];
        this.buffer = [];

        this.board.resize(width * height);
        this.buffer.resize(width * height);
    }

    get(x, y) {
        x %= this.width;
        y %= this.height;
        return this.board[y * this.width + x];
    }

    set(x, y, v) {
        x %= this.width;
        y %= this.height;
        this.board[y * this.width + x] = v;
    }

    show() {
        for y in 0, this.height {
            for x in 0, this.width {
                io.print(if this.get(x, y) then "#" else ".");
            }
            io.println();
        }
    }

    step() {
        fn set(x, y, v) {
            x %= this.width;
            y %= this.height;
            this.buffer[y * this.width + x] = v;
        }

        fn nbors(x, y) {
            var count = 0;
            for dy in -1, 2 {
                for dx in -1, 2 {
                    if dx == 0 && dy == 0 {
                        continue;
                    }

                    if this.get(x + dx, y + dy) {
                        count += 1;
                    }
                }
            }
            return count;
        }

        for y in 0, this.height {
            for x in 0, this.width {
                var n = nbors(x, y);
                if n == 2 {
                    set(x, y, this.get(x, y));
                } else {
                    set(x, y, n == 3);
                }
            }
        }

        # Swap buffers
        var t = this.board;
        this.board = this.buffer;
        this.buffer = t;
    }

    run(interval) {
        while true {
            this.show();
            this.step();
            io.print("\e[\(this.height)A\e[\(this.width)D");
            os.sleep(interval);
        }
    }
}

var gol = GameOfLife(20, 10);
gol.set(1, 0, true);
gol.set(2, 1, true);
gol.set(0, 2, true);
gol.set(1, 2, true);
gol.set(2, 2, true);
gol.run(0.1);
