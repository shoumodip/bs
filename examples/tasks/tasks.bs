var TASKS_PATH = os.getenv("HOME") $ "/.tasks"

class Tasks {
    init(path) {
        this.path = path
        this.tasks = (io.readfile(this.path) || "").split("\n")
    }

    add(title) {
        this.tasks.push(title)
        io.println("Added: {title}")
    }

    verify(index) {
        var total = len(this.tasks)
        if index >= total {
            io.eprintln("Error: invalid index '{index}'")

            if total == 1 {
                io.eprintln("Note: there is currently 1 task")
            } else {
                io.eprintln("Note: there are currently {total} tasks")
            }

            os.exit(1)
        }
    }

    done(index) {
        this.verify(index)
        var title = this.tasks.remove(index)
        io.println("Done #{index}: {title}")
    }

    edit(index, title) {
        this.verify(index)
        this.tasks[index] = title
        io.println("Edit #{index}: {title}")
    }

    list(query) {
        for i, t in this.tasks {
            if query && !t.find(query) {
                continue
            }

            io.println("[{i}] {t}")
        }
    }

    save() {
        var f = io.Writer(this.path)
        if !f {
            io.eprintln("Error: could not save tasks to '{this.path}'")
            os.exit(1)
        }

        f.write(this.tasks.join("\n"))
        f.close()
    }
}

fn usage(f) {
    f.writeln("Usage: {os.args[0]} <command> [args...]")
    f.writeln("Commands:")
    f.writeln("    add  <title>            Add a task")
    f.writeln("    done <index>            Mark task as done")
    f.writeln("    edit <index> <title>    Edit a task")
    f.writeln("    list [query]            List tasks, with optional query")
}

if len(os.args) < 2 {
    io.eprintln("Error: command not provided")
    usage(io.stderr)
    os.exit(1)
}

var command = os.args[1]
match command {
    "add" => {
        if len(os.args) < 3 {
            io.eprintln("Error: task title not provided")
            usage(io.stderr)
            os.exit(1)
        }

        var tasks = Tasks(TASKS_PATH)
        tasks.add(os.args[2])
        tasks.save()
    }

    "done" => {
        if len(os.args) < 3 {
            io.eprintln("Error: task index not provided")
            usage(io.stderr)
            os.exit(1)
        }

        var index = os.args[2].tonumber()
        if !index {
            io.eprintln("Error: invalid index '{os.args[2]}'")
            os.exit(1)
        }

        var tasks = Tasks(TASKS_PATH)
        tasks.done(index)
        tasks.save()
    }

    "edit" => {
        if len(os.args) < 3 {
            io.eprintln("Error: task index and title not provided")
            usage(io.stderr)
            os.exit(1)
        }

        var index = os.args[2].tonumber()
        if !index {
            io.eprintln("Error: invalid index '{os.args[2]}'")
            os.exit(1)
        }

        if len(os.args) < 4 {
            io.eprintln("Error: task title not provided")
            usage(io.stderr)
            os.exit(1)
        }

        var tasks = Tasks(TASKS_PATH)
        tasks.edit(index, os.args[3])
        tasks.save()
    }

    "list" => {
        var query = nil
        if len(os.args) > 2 {
            query = Regex(os.args[2])
            if !query {
                io.eprintln("Error: invalid query '{os.args[2]}'")
                os.exit(1)
            }
        }

        var tasks = Tasks(TASKS_PATH)
        tasks.list(query)
    }
} else {
    io.eprintln("Error: invalid command '{command}'")
    usage(io.stderr)
    os.exit(1)
}
