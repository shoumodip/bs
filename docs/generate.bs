#!/usr/bin/env bs

var Examples = [
    "cat",
    "ls",
    "grep",
    "shell",
    "rule110",
    "game_of_life",
    "tasks",
    "flappy_bird",
]

var TokenType = {
    Type = "type",
    Const = "constant",
    Delim = "delimiter",
    Space = "whitespace",
    Ident = "identifier",
    String = "string",
    Keyword = "keyword",
    Comment = "comment",
    RawString = "raw string",
}

class Token {
    init(type, literal) {
        this.type = type
        this.literal = literal
    }
}

var TypesC = [
    "void",
    "int",
    "float",
    "size_t",
    "Color",
    "Music",
    "Sound",
    "Vector2",
    "Texture",
    "Rectangle",
    "Bs",
    "Bs_FFI",
    "Bs_Str",
    "Bs_Value",
    "Bs_C_Lib",
    "Bs_C_Class",
]

var KeywordsC = [
    "if",
    "else",
    "switch",
    "for",
    "while",
    "break",
    "continue",
    "return",
    "static",
    "const",
    "sizeof",
]

var KeywordsBs = [
    "len",
    "panic",
    "assert",
    "delete",
    "import",
    "typeof",
    "if",
    "then",
    "else",
    "match",
    "in",
    "is",
    "instanceof",
    "for",
    "while",
    "break",
    "continue",
    "fn",
    "pub",
    "var",
    "return",
    "defer",
    "class",
]

var ConstantsC = [
    "true",
    "false",
    "bs_check_arity",
    "bs_arg_check_value_type",
    "bs_arg_check_object_type",
    "bs_arg_check_whole_number",
    "bs_value_nil",
    "bs_value_num",
    "bs_value_bool",
    "bs_value_object",
    "bs_c_array_size",
    "bs_this_c_instance_data_as",
    "Bs_Sv_Static",
    "NULL",
    "BS_VALUE_NUM",
    "BS_OBJECT_STR",
    "BS_LIBRARY_INIT",
]

var ConstantsBs = [
    "nil",
    "true",
    "false",
    "this",
    "super",
    "is_main_module",
]

var Delimiters = [
    ";",
    ".",
    "->",
    ",",
    "..",
    "(",
    ")",
    "\{",
    "}",
    "[",
    "]",
    "+",
    "-",
    "*",
    "/",
    "%",
    "|",
    "&",
    "^",
    "~",
    "||",
    "&&",
    "!",
    "<<",
    ">>",
    ">",
    ">=",
    "<",
    "<=",
    "==",
    "!=",
    "$",
    "=",
    "+=",
    "-=",
    "*=",
    "/=",
    "%=",
    "|=",
    "&=",
    "^=",
    "<<=",
    ">>=",
    "$=",
]

fn escape(s) {
    var out = Bytes()
    var code = false
    for _, c in s {
        match c {
            "&" -> out.push("&amp;")
            "<" -> out.push("&lt;")
            ">" -> out.push("&gt;")
            "'" -> out.push("&apos;")
            '"' -> out.push("&quot;")
            '`' -> {
                code = !code
                out.push(if code then "<code>" else "</code>")
            }
        } else {
            out.push(c)
        }
    }

    return out.slice()
}

fn source(f, source, bs) {
    var tokens = []
    {
        var Types = if bs then [] else TypesC
        var Keywords = if bs then KeywordsBs else KeywordsC
        var Constants = if bs then ConstantsBs else ConstantsC

        var i = 0
        var n = len(source)
        var braces = []

        fn take(f) {
            while i < n && f(source[i]) {
                i += 1
            }
        }

        fn string(quote) {
            while i < n && source[i] != quote {
                if source[i] == "\\" {
                    i += 1
                } else if bs && source[i] == "\{" {
                    braces.push(quote)
                    break
                }
                i += 1
            }

            if i < n {
                i += 1
            }
        }

        fn ishex(c) -> ascii.isdigit(c) || c in "abcdefABCDEF"
        fn isident(c) -> ascii.isalnum(c) || c == "_"
        fn isprefix(d) -> i + len(d) <= n && source.slice(i, i + len(d)) == d

        if bs && isprefix("#!") {
            var start = i
            take(fn (c) -> c != "\n")
            tokens.push(Token(TokenType.Const, source.slice(start, i)))
        }

        while i < n {
            var start = i
            var type = nil
            var c = source[i]; i += 1
            match c {
                if ascii.isspace(c) -> {
                    type = TokenType.Space
                    take(ascii.isspace)
                }

                if ascii.isdigit(c) -> {
                    type = TokenType.Const

                    if i < n && source[i] == "x" {
                        i += 1
                        take(ishex)
                    } else {
                        take(ascii.isdigit)
                        if i < n && source[i] == "." {
                            i += 1
                            take(ascii.isdigit)
                        }
                    }
                }

                if ascii.isalpha(c) || c == "_" -> {
                    type = TokenType.Ident
                    take(isident)
                }

                if c == "/" && i < n && source[i] == "/" -> {
                    type = TokenType.Comment
                    take(fn (c) -> c != "\n")
                }

                if c == "/" && i < n && source[i] == "*" -> {
                    type = TokenType.Comment

                    var depth = 1
                    while i < n && depth > 0 {
                        if isprefix("/*") {
                            i += 2
                            depth += 1
                        } else if isprefix("*/") {
                            i += 2
                            depth -= 1
                            if !bs { break }
                        } else {
                            i += 1
                        }
                    }
                }

                "'", '"' -> {
                    type = TokenType.String
                    string(c)
                }
            } else {
                i -= 1
                type = TokenType.Delim

                var found = ""
                for _, d in Delimiters {
                    if isprefix(d) && len(d) > len(found) {
                        found = d
                    }
                }

                i += len(found).max(1)
            }

            var literal = source.slice(start, i)
            if type == TokenType.Ident {
                if literal in Types {
                    type = TokenType.Type
                } else if literal in Keywords {
                    type = TokenType.Keyword
                } else if literal in Constants {
                    type = TokenType.Const
                }
            }

            if type == TokenType.Delim {
                if bs {
                    if literal == "\{" {
                        if isprefix("\{") {
                            take(fn (c) -> c == "\{")
                            var end = source.slice(start, i).replace("\{", "}")

                            while i < n && !isprefix(end) {
                                i += 1
                            }

                            if isprefix(end) {
                                i += len(end)
                            }

                            type = TokenType.RawString
                            literal = source.slice(start, i)
                        } else {
                            braces.push(nil)
                        }
                    } else if literal == "}" {
                        var quote = braces.pop()
                        if quote {
                            string(quote)
                            type = TokenType.String
                            literal = source.slice(start, i)
                        }
                    }
                } else if literal == "#" {
                    take(fn (c) -> !ascii.isspace(c))
                    tokens.push(Token(TokenType.Keyword, source.slice(start, i))); start = i

                    take(fn (c) -> ascii.isspace(c))
                    tokens.push(Token(TokenType.Space, source.slice(start, i))); start = i

                    take(fn (c) -> c != "\n")
                    tokens.push(Token(TokenType.String, source.slice(start, i)))
                    continue
                }
            }

            tokens.push(Token(type, literal))
        }
    }

    fn skip(type) -> type == TokenType.Space || type == TokenType.Comment

    fn isnext(i, type, literal) {
        i += 1
        while i < len(tokens) && skip(tokens[i].type) {
            i += 1
        }
        return i < len(tokens) && tokens[i].type == type && tokens[i].literal == literal
    }

    fn isprev(i, type, literal) {
        i -= 1
        while i >= 0 && skip(tokens[i].type) {
            i -= 1
        }
        return i >= 0 && tokens[i].type == type && tokens[i].literal == literal
    }

    // Highlighters starts here
    for i, token in tokens {
        var l = token.literal
        match token.type {
            TokenType.Type -> f.write("<span class='class'>{escape(l)}</span>")
            TokenType.Const -> f.write("<span class='constant'>{escape(l)}</span>")
            TokenType.Delim -> f.write(escape(l))
            TokenType.Space -> f.write(l)

            TokenType.Ident -> {
                if isnext(i, TokenType.Delim, "(") {
                    f.write("<span class='function'>{l}</span>")
                } else if isprev(i, TokenType.Delim, ".") {
                    f.write("<span class='field'>{l}</span>")
                } else if !bs && isprev(i, TokenType.Delim, "->") {
                    f.write("<span class='field'>{l}</span>")
                } else if isprev(i, TokenType.Keyword, "class") {
                    f.write("<span class='class'>{l}</span>")
                } else {
                    f.write(l)
                }
            }

            TokenType.String -> {
                var i = 0
                if l[i] == "}" {
                    f.write("<span class='escape'>}</span>")
                    i += 1
                }

                var end = len(l)
                if l[end - 1] == "\{" {
                    end -= 1
                }

                while i < end {
                    var j = l.find("\\", i)
                    if j {
                        f.write("<span class='string'>{escape(l.slice(i, j))}</span>")
                        f.write("<span class='escape'>\\{escape(l[j + 1])}</span>")
                        i = j + 2
                    } else {
                        f.write("<span class='string'>{escape(l.slice(i, end))}</span>")
                        i = end
                    }
                }

                if end != len(l) {
                    f.write("<span class='escape'>\{</span>")
                }
            }

            TokenType.Keyword -> f.write("<span class='keyword'>{l}</span>")
            TokenType.Comment -> f.write("<span class='comment'>{escape(l)}</span>")
            TokenType.RawString -> f.write("<span class='string'>{escape(l)}</span>")
        }
    }

    f.writeln()
}

class Section {
    init(title, level) {
        this.title = title
        this.level = level
    }
}

fn generate(path) {
    var contents = io.readfile(path)
    if !contents {
        io.eprintln("Error: could not read '{path}'")
        os.exit(1)
    }

    var output = path.slice(0, len(path) - 2) $ "html"
    var f = io.Writer(output)
    if !f {
        io.eprintln("Error: could not create '{output}'")
        os.exit(1)
    }
    defer f.close()

    var lines = contents.split("\n")
    if len(lines) == 0 || !lines[0].prefix("# ") {
        io.eprintln("{path}:1:1: error: expected '#' on first line")
        os.exit(1)
    }

    f.writeln("<!doctype html>")
    f.writeln("<html>")
    f.writeln("<head>")
    f.writeln("<meta charset='UTF-8'>")
    f.writeln("<meta name='viewport' content='width=device-width, initial-scale=1.0'>")
    f.writeln("<link rel='stylesheet' href='style.css'>")
    f.writeln("</head>")
    f.writeln("<body>")
    f.writeln("<header id='header'>")
    f.writeln("<button id='toggle-sidebar' aria-label='Toggle Sidebar'>☰</button>")
    f.writeln("<h1>{escape(lines[0].slice(2))}</h1>")
    f.writeln("</header>")
    f.writeln("<main id='main'>")

    var row = 1
    var level = 0
    var sections = []
    var navigation = true

    while row < len(lines) {
        var line = lines[row]; row += 1
        match line {
            "```bs", "```c", "```console" -> {
                f.writeln("<div class='codes'>")
                f.writeln("<button class='copy' onclick='copyClick(this)'>")
                f.writeln("<svg height='16' viewBox='0 0 16 16' version='1.1' width='16'>")
                f.write("    <path d='M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 ")
                f.write("0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 ")
                f.write("0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z'></path><path d='M5 ")
                f.write("1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 ")
                f.write("11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 ")
                f.writeln(".138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z'></path>")
                f.writeln("</svg>")
                f.writeln("</button>")
                f.writeln("<button class='copied hidden'>")
                f.writeln("<svg height='16' viewBox='0 0 16 16' version='1.1' width='16'>")
                f.write("    <path d='M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 ")
                f.write("9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 ")
                f.writeln("0 0 1 1.06 0Z'></path>")
                f.writeln("</svg>")
                f.writeln("</button>")
                f.writeln("<pre class='code active'>")

                var mode = line.slice(3)

                fn code() {
                    var code = Bytes()
                    while row < len(lines) {
                        line = lines[row]; row += 1
                        if line == "```" {
                            break
                        }

                        code.push(line $ "\n")
                    }

                    return code.slice(0, code.count() - 1) // Trim the last newline
                }

                match mode {
                    "bs" -> source(f, code(), true)
                    "c" -> source(f, code(), false)

                    "console" -> {
                        while row < len(lines) {
                            line = lines[row]; row += 1
                            if line == "```" {
                                break
                            }

                            if line.prefix("$ ") {
                                f.write("<span class='string'>$ </span>")

                                var comment = line.find("#")
                                if comment {
                                    f.write(escape(line.slice(2, comment)))
                                    f.write("<span class='comment'>{escape(line.slice(comment))}</span>")
                                } else {
                                    f.write(escape(line.slice(2)))
                                }
                            } else {
                                f.write(escape(line))
                            }

                            f.writeln()
                        }
                    }
                }

                f.writeln("</pre>")
                f.writeln("</div>")
            }

            "<!-- home-icon -->" -> {
                f.writeln("<a href='index.html' class='navigation-icon'>")
                f.write("<svg xmlns='http://www.w3.org/2000/svg' ")
                f.write("xmlns:xlink='http://www.w3.org/1999/xlink' width='30px' height='30px' viewBox='0 ")
                f.write("0 30 30' version='1.1'>")
                f.write("<g id='surface1'>")
                f.write("<path fill='#D4BE98' d='M 29.625 13.960938 L 16.132812 2.09375 C 15.507812 ")
                f.write("1.542969 14.488281 1.542969 13.867188 2.09375 L 0.382812 13.960938 C -0.25 ")
                f.write("14.511719 -0.0820312 14.960938 0.757812 14.960938 L 4.917969 14.960938 L 4.917969 ")
                f.write("27.113281 C 4.917969 27.773438 5.464844 28.320312 6.132812 28.320312 L 11.222656 ")
                f.write("28.320312 L 11.222656 20.328125 C 11.222656 19.667969 11.769531 19.121094 ")
                f.write("12.433594 19.121094 L 17.574219 19.121094 C 18.246094 19.121094 18.789062 ")
                f.write("19.65625 18.789062 20.328125 L 18.789062 28.320312 L 23.878906 28.320312 C ")
                f.write("24.550781 28.320312 25.089844 27.777344 25.089844 27.113281 L 25.089844 14.957031 ")
                f.write("L 29.253906 14.957031 C 30.078125 14.957031 30.246094 14.511719 29.625 13.960938 ")
                f.write("Z M 29.625 13.960938 '/>")
                f.write("</g>")
                f.writeln("</a>")
            }

            "<!-- github-icon -->" -> {
                f.writeln("<a href='https://github.com/shoumodip/bs' class='navigation-icon'>")
                f.write("<svg xmlns='http://www.w3.org/2000/svg' ")
                f.write("xmlns:xlink='http://www.w3.org/1999/xlink' width='30px' height='30px' viewBox='0 ")
                f.write("0 30 30' version='1.1'>")
                f.write("<g id='surface1'>")
                f.write("<path fill='#D4BE98' d='M 15 0 C 6.714844 0 0 6.714844 0 15 C 0 21.636719 ")
                f.write("4.304688 27.25 10.257812 29.226562 C 11.007812 29.363281 11.285156 28.902344 ")
                f.write("11.285156 28.503906 L 11.285156 25.960938 C 7.109375 26.867188 6.230469 24.152344 ")
                f.write("6.230469 24.152344 C 5.546875 22.417969 4.5625 21.957031 4.5625 21.957031 C ")
                f.write("3.191406 21.023438 4.667969 21.042969 4.667969 21.042969 C 6.179688 21.148438 ")
                f.write("6.972656 22.59375 6.972656 22.59375 C 8.316406 24.898438 10.496094 24.230469 ")
                f.write("11.355469 23.84375 C 11.492188 22.871094 11.878906 22.203125 12.3125 21.828125 C ")
                f.write("8.976562 21.449219 5.46875 20.15625 5.46875 14.398438 C 5.46875 12.757812 ")
                f.write("6.054688 11.417969 7.019531 10.367188 C 6.871094 9.988281 6.347656 8.46875 ")
                f.write("7.167969 6.410156 C 7.167969 6.410156 8.429688 6.007812 11.3125 7.960938 C ")
                f.write("12.511719 7.625 13.8125 7.460938 15.101562 7.460938 C 16.394531 7.460938 ")
                f.write("17.691406 7.625 18.894531 7.960938 C 21.777344 6.007812 23.035156 6.410156 ")
                f.write("23.035156 6.410156 C 23.859375 8.46875 23.335938 9.988281 23.1875 10.367188 C ")
                f.write("24.152344 11.417969 24.734375 12.757812 24.734375 14.398438 C 24.734375 20.167969 ")
                f.write("21.21875 21.441406 17.875 21.816406 C 18.414062 22.273438 18.894531 23.175781 ")
                f.write("18.894531 24.558594 L 18.894531 28.625 C 18.894531 29.027344 19.167969 29.488281 ")
                f.write("19.917969 29.351562 C 25.695312 27.25 30 21.636719 30 15 C 30 6.714844 23.285156 ")
                f.write("0 15 0 Z M 15 0 '/>")
                f.write("</g>")
                f.write("</svg>")
                f.writeln("</a>")
            }

            "<!-- no-navigation -->" -> navigation = false

            if line.prefix("#") -> {
                var count = 0
                for _, c in line {
                    if c != "#" {
                        break
                    }

                    count += 1
                }

                if count < 2 || count > 6 {
                    io.eprintln("{path}:{row}:1: error: invalid heading depth, 2 to 6 allowed")
                    os.exit(1)
                }

                if count <= level {
                    for i in count, level + 1 {
                        f.writeln("</section>")
                    }
                }
                level = count

                line = line.slice(count).trim(" ")

                var highlight = line.find("@")
                if highlight {
                    var color = line.slice(highlight + 1)
                    line = line.slice(0, highlight)
                    highlight = color
                }

                var section = Section(line, level)
                f.writeln("<section id='s{len(sections)}'>")

                if highlight {
                    f.writeln("<h{count} class='hl-header'>")

                    line = line.trim(" ")
                    if highlight == "method" {
                        var klass = line.slice(0, line.find("."))
                        section.title = line.slice(len(klass) + 1, line.find("("))

                        f.write("<code>")
                        f.write("<span class='class'>{klass}</span>.<span class='field'>{section.title}</span>")
                        f.write(line.slice(line.find("(")))
                        f.write("</code>")
                    } else {
                        section.title = line.slice(0, line.find("(") || len(line))

                        f.write("<code>")
                        f.write("<span class='{highlight}'>{section.title}</span>")
                        f.write(line.slice(len(section.title)))
                        f.write("</code>")
                    }

                    f.writeln("</h{count}>")
                } else {
                    f.writeln("<h{count}>{escape(line)}</h{count}>")
                }

                sections.push(section)
            }

            if line != "" -> {
                f.writeln("<p>")
                f.writeln(if line.prefix("<") then line else escape(line))

                while row < len(lines) {
                    line = lines[row]; row += 1
                    if line == "" {
                        break
                    }

                    f.writeln(if line.prefix("<") then line else escape(line))
                }

                f.writeln("</p>")
            }
        }
    }

    for i in 1, level {
        f.writeln("</section>")
    }

    f.writeln("</main>")

    if navigation {
        f.writeln("<nav id='sidebar' class='collapsed'>")
        f.writeln("<ul>")

        var i = 0
        while i < len(sections) {
            fn nav() {
                var index = i; i += 1
                var section = sections[index]

                f.writeln("<li>")
                f.writeln("<a href='#s{index}'>{escape(section.title)}</a>")

                if (i < len(sections) && sections[i].level > section.level) {
                    f.writeln("<ul>")
                    while (i < len(sections) && sections[i].level > section.level) {
                        nav()
                    }
                    f.writeln("</ul>")
                }

                f.writeln("</li>")
            }

            nav()
        }

        f.writeln("</ul>")
        f.writeln("</nav>")
    } else {
        f.writeln("<style>")
        f.writeln("#toggle-sidebar \{")
        f.writeln("    display: none;")
        f.writeln("}")
        f.writeln("@media (min-width: 768px) \{")
        f.writeln("    main \{")
        f.writeln("        margin-left: 10%;")
        f.writeln("        margin-right: 10%;")
        f.writeln("    }")
        f.writeln("}")
        f.writeln("</style>")
    }

    f.writeln("<script src='script.js'></script>")
    f.writeln("</body>")
    f.writeln("</html>")

    io.println("Wrote documentation to '{path}'")
}

fn examples() {
    var path = "docs/examples.md"
    var f = io.Writer(path)
    if !f {
        io.eprintln("Error: could not write '{path}'")
        os.exit(1)
    }
    defer f.close()

    f.writeln("# Examples")
    f.writeln()
    f.writeln("<!-- home-icon -->")

    for _, example in Examples {
        var path = "examples/{example}/README.md"
        var contents = io.readfile(path)
        if !contents {
            io.eprintln("Error: could not read '{path}'")
            os.exit(1)
        }

        f.writeln()
        for _, line in contents.split("\n") {
            if line.prefix("<!-- embed: ") && line.suffix(" -->") {
                var path = line.slice(12, len(line) - 4)
                var contents = io.readfile(path)
                if !contents {
                    io.eprintln("Error: could not read '{path}'")
                    os.exit(1)
                }

                var comps = path.split("/")
                f.writeln(if path.suffix(".c") then "```c" else "```bs")
                f.writeln("//", comps[len(comps) - 1])
                f.writeln()

                for _, line in contents.split("\n") {
                    f.writeln(line)
                }

                f.writeln("```")
            } else if line.prefix("#") {
                f.writeln("#" $ line)
            } else {
                f.writeln(line)
            }
        }
    }
}

if !is_main_module {
    return
}

if len(os.args) < 2 {
    examples()
    for _, e in io.readdir("docs") {
        var path = "docs/" $ e.name()
        if path.suffix(".md") {
            generate(path)
        }
    }
} else if os.args[1] == "examples" {
    examples()
    generate("docs/examples.md")
} else {
    for i, arg in os.args {
        if i != 0 {
            generate(arg)
        }
    }
}
